[ovs]
bridge_mappings = default:br-eth1,external:br-ex
integration_bridge = br-int
network_vlan_ranges = default:1001:4094
tunnel_type = vxlan,gre
enable_tunneling = True
local_ip = %(ml2_local_ip)s


[ml2]
type_drivers = local,flat,vlan,gre,vxlan 
tenant_network_types = local,flat,vlan,gre,vxlan
mechanism_drivers = openvswitch,l2population

# (ListOpt) List of network type driver entrypoints to be loaded from
# the neutron.ml2.type_drivers namespace.
#
# type_drivers = local,flat,vlan,gre,vxlan
# Example: type_drivers = flat,vlan,gre,vxlan

# (ListOpt) Ordered list of network_types to allocate as tenant
# networks. The default value 'local' is useful for single-box testing
# but provides no connectivity between hosts.
#
# tenant_network_types = local
# Example: tenant_network_types = vlan,gre,vxlan

# (ListOpt) Ordered list of networking mechanism driver entrypoints
# to be loaded from the neutron.ml2.mechanism_drivers namespace.
# mechanism_drivers =
# Example: mechanism_drivers = openvswitch,mlnx
# Example: mechanism_drivers = arista
# Example: mechanism_drivers = cisco,logger
# Example: mechanism_drivers = openvswitch,brocade
# Example: mechanism_drivers = linuxbridge,brocade

# (ListOpt) Ordered list of extension driver entrypoints
# to be loaded from the neutron.ml2.extension_drivers namespace.
# extension_drivers =
# Example: extension_drivers = anewextensiondriver

[ml2_type_flat]
flat_networks = external

# (ListOpt) List of physical_network names with which flat networks
# can be created. Use * to allow flat networks with arbitrary
# physical_network names.
#
# flat_networks =
# Example:flat_networks = physnet1,physnet2
# Example:flat_networks = *

[ml2_type_vlan]
# (ListOpt) List of <physical_network>[:<vlan_min>:<vlan_max>] tuples
# specifying physical_network names usable for VLAN provider and
# tenant networks, as well as ranges of VLAN tags on each
# physical_network available for allocation as tenant networks.
#
# network_vlan_ranges =
# Example: network_vlan_ranges = physnet1:1000:2999,physnet2
network_vlan_ranges = default:1:4094

[ml2_type_gre]

tunnel_id_ranges = 1:1000
# (ListOpt) Comma-separated list of <tun_min>:<tun_max> tuples enumerating ranges of GRE tunnel IDs that are available for tenant network allocation
# tunnel_id_ranges =

[ml2_type_vxlan]
# (ListOpt) Comma-separated list of <vni_min>:<vni_max> tuples enumerating
# ranges of VXLAN VNI IDs that are available for tenant network allocation.
#
vni_ranges = 4097:200000

# (StrOpt) Multicast group for the VXLAN interface. When configured, will
# enable sending all broadcast traffic to this multicast group. When left
# unconfigured, will disable multicast VXLAN mode.
#
# vxlan_group =
# Example: vxlan_group = 239.1.1.1

[securitygroup]
#firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
firewall_driver=neutron.agent.firewall.NoopFirewallDriver
enable_security_group = True
enable_ipset = True
# Controls if neutron security group is enabled or not.
# It should be false when you use nova security group.
# enable_security_group = True
[agent]
tunnel_types = vxlan, gre
l2_population = True
arp_responder = True
enable_distributed_routing = True

#configure added by j00209498
keystone_auth_url = http://%(cascading_node_ip)s:35357/v2.0
neutron_user_name = neutron
neutron_password = openstack
neutron_tenant_name = service
os_region_name = %(region_name)s

cascading_os_region_name = %(cascading_os_region_name)s
cascading_auth_url = http://%(cascading_node_ip)s:35357/v2.0
cascading_user_name = neutron
cascading_password = openstack
cascading_tenant_name = service
query_ports_mode = 'cascaded_neutron'